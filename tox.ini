[tox]
envlist = integration

[testenv:docs]
deps =
    sphinx
    sphinx_rtd_theme
    vcversioner
commands = sphinx-build -W -b html docs/source docs/build/html
commands_pre =
commands_post =

[testenv:style]
# skip the usual pre/post commands
commands_pre =
commands_post =
skip_install = true
deps =
    black
    flake8
    flake8-bugbear
    flake8-isort
    pep8-naming
commands =
    black --check --verbose tox_docker
    flake8 tox_docker

[testenv:integration]
# commands_pre/_post only work in tox 3.4+, but at least in some
# CI configurations they'll tell us if we've leaked resources
commands_pre = python tox_docker/tests/capture_containers_and_volumes.py
commands_post = python tox_docker/tests/assert_containers_and_volumes_unchanged.py
docker =
    tcp-udp-test
    nginx-from-registry-url
    another-nginx
    healthcheck-builtin
    healthcheck-custom
    links-httpd
    links-registry
    links-nginx
    custom-port-mapping
deps =
    pytest
    pudb
commands = py.test [] {toxinidir}/tox_docker

[docker:tcp-udp-test]
# used by test cases to ensure we map both TCP and UDP ports
image = ksdn117/tcp-udp-test

[docker:nginx-from-registry-url]
# used by test cases to ensure we can specify image as a URL
image = docker.io/library/nginx:1.19-alpine

[docker:another-nginx]
# not used by a test case; but this proves that we can run
# two copies of the same image in a tox-docker run
image = docker.io/library/nginx:1.19-alpine

[docker:healthcheck-builtin]
image = healthcheck/redis:alpine
# the default health check start period seems to be 30s, make tests faster
healthcheck_interval = 1
healthcheck_timeout = 1
healthcheck_start_period = 1

[docker:healthcheck-custom]
image = redis:5-alpine
healthcheck_cmd = redis-cli ping | grep -q PONG
healthcheck_interval = 1
healthcheck_timeout = 1
healthcheck_start_period = 1

[docker:custom-port-mapping]
# https://github.com/docker-library/mysql/blob/master/5.7/Dockerfile exposes 33060,
# our test will verify that our custom mapping is respected and host's 3306 is bound
image = mysql:5.7
environment =
    MYSQL_ALLOW_EMPTY_PASSWORD=true
ports = 3306:3306/tcp

[docker:links-httpd]
image = httpd:2.4-alpine

[docker:links-registry]
image = registry.hub.docker.com/library/registry:2.7
links = links-httpd:apache

[docker:links-nginx]
image = nginx:1.19-alpine
links =
    links-registry:hub
    links-httpd

# do NOT add this env to the envlist; it is supposed to fail,
# and the CI scripts run it directly with this expectation
[testenv:healthcheck-failing]
skip_install = true
commands = python -c ""
docker = healthcheck-failing

[docker:healthcheck-failing]
# we don't need redis in particular, just anything with /bin/false
# (we use this since the CI test runs will have already pulled it)
image = redis:5-alpine
healthcheck_cmd = /bin/false
healthcheck_interval = 1
healthcheck_timeout = 1
healthcheck_retries = 3
healthcheck_start_period = 0
